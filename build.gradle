buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.6"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "org.springframework.build.gradle:propdeps-plugin:0.0.7"
        classpath "com.moowork.gradle:gradle-node-plugin:0.12"
        classpath "com.moowork.gradle:gradle-gulp-plugin:0.12"
        classpath "se.transmode.gradle:gradle-docker:1.2"
        classpath "io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE"
        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.4'
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1+'
    }
}

apply plugin: 'java'
sourceCompatibility=1.8
targetCompatibility=1.8
apply plugin: 'maven'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'propdeps'
defaultTasks 'bootRun'

bootRepackage {
   mainClass = 'com.mycompany.myapp.JhipsterApp'
}

war {
    rootSpec.exclude("**/tomcat-*.jar")
}

springBoot {
    mainClass = 'com.mycompany.myapp.JhipsterApp'
    executable = true
}

bootRun {
    addResources = false
}

test {
    include '**/*UnitTest*'
    include '**/*IntTest*'

    ignoreFailures true
    reports.html.enabled = false
}



task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}


apply from: 'gradle/yeoman.gradle'
apply from: 'gradle/sonar.gradle'

apply from: 'gradle/liquibase.gradle'

apply from: 'gradle/gatling.gradle'
apply from: 'gradle/mapstruct.gradle'
apply from: 'gradle/docker.gradle'
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty('prod')) {
    apply from: 'gradle/profile_prod.gradle'
} else {
    apply from: 'gradle/profile_dev.gradle'
}

description = 'oauth gateway'

configurations {
    providedRuntime
}

/** 此闭包内的声明子类皆可使用 */
allprojects {
    group = 'cn.starteasy.oauth'
    version = '0.0.1-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'maven-publish-auth'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'http://repo.spring.io/milestone' }
        maven { url 'http://repo.spring.io/snapshot' }
        maven { url 'https://repository.jboss.org/nexus/content/repositories/releases' }
        maven { url 'https://oss.sonatype.org/content/repositories/releases' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'http://repo.maven.apache.org/maven2' }
    }

    publishing {
        task sourceJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        publications {
            mavenJava(MavenPublication) { from components.java }
            mavenJava(MavenPublication) {
                artifact(sourceJar) {
                    classifier = "sources"
                }
            }
        }

        repositories {
            maven {
                name = 'starteasy'
                url "http://repo.starteasy.cn/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
            }
        }
    }

//    tasks.withType(Compile) {
//        options.encoding = "UTF-8"
//    }
}

dependencies {
    compile "io.dropwizard.metrics:metrics-core"
    compile "io.dropwizard.metrics:metrics-annotation:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-ehcache:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-graphite:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-healthchecks:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-jvm:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-servlet:${dropwizard_metrics_version}"
    compile "io.dropwizard.metrics:metrics-json:${dropwizard_metrics_version}"
    compile ("io.dropwizard.metrics:metrics-servlets:${dropwizard_metrics_version}") {
        exclude(module: 'metrics-healthchecks')
    }
    compile("net.logstash.logback:logstash-logback-encoder:${logstash_logback_encoder_version}") {
        exclude(module: 'ch.qos.logback')
    }
    compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jackson_version}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    compile ("com.ryantenney.metrics:metrics-spring:${metrics_spring_version}") {
        exclude(module: 'metrics-core')
        exclude(module: 'metrics-healthchecks')
    }
    compile "org.hibernate:hibernate-core:${hibernate_entitymanager_version}"
    compile("com.zaxxer:HikariCP:${HikariCP_version}") {
        exclude(module: 'tools')
    }
    compile "commons-lang:commons-lang:${commons_lang_version}"
    compile "commons-io:commons-io:${commons_io_version}"
    compile "javax.inject:javax.inject:${javax_inject_version}"
    compile "javax.transaction:javax.transaction-api"
    compile "org.apache.geronimo.javamail:geronimo-javamail_1.4_mail:${geronimo_javamail_1_4_mail_version}"

    compile ("org.hibernate:hibernate-ehcache") {
        exclude(module: 'ehcache-core')
    }
    compile "org.hibernate:hibernate-envers"
    compile "org.hibernate:hibernate-validator"
    compile ("org.liquibase:liquibase-core:${liquibase_core_version}") {
        exclude(module: 'jetty-servlet')
    }
    compile "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
    compile "org.springframework.boot:spring-boot-actuator"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.springframework.boot:spring-boot-loader-tools"
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-starter-aop"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector"
    compile "org.springframework.cloud:spring-cloud-spring-service-connector"
    compile "org.springframework.cloud:spring-cloud-localconfig-connector"
    compile ("org.springframework:spring-context-support") {
        exclude(module: 'quartz')
    }
    compile "org.springframework.security:spring-security-config:${spring_security_version}"
    compile "org.springframework.security:spring-security-data:${spring_security_version}"
    compile "org.springframework.security:spring-security-web:${spring_security_version}"
    compile "org.springframework.security.oauth:spring-security-oauth2:${spring_security_oauth2_version}"

    compile("io.springfox:springfox-swagger2:${springfox_version}"){
        exclude module: 'mapstruct'
    }

    compile "mysql:mysql-connector-java"
    compile "fr.ippon.spark.metrics:metrics-spark-reporter:${metrics_spark_reporter_version}"
    compile "org.mapstruct:mapstruct-jdk8:${mapstruct_version}"
    //compile "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    testCompile "com.jayway.awaitility:awaitility:${awaility_version}"
    testCompile "com.jayway.jsonpath:json-path"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.assertj:assertj-core:${assertj_core_version}"
    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core"
    testCompile "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
    testCompile "org.hamcrest:hamcrest-library"

    testCompile "io.gatling.highcharts:gatling-charts-highcharts:${gatling_version}"

    testCompile "com.h2database:h2"
    optional "org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}"
    //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here

}


task createREADME() {
    file("README.md").createNewFile()
}

subprojects {

    task "createJavaProject" << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }

        /** 可选生成子文件夹 */
        file("src/main/filters").mkdirs()
        file("src/main/assembly").mkdirs()
        file("src/main/config").mkdirs()
        file("src/main/scripts").mkdirs()

        /** 填充文件，便于git提交 */
        file("src/main/java/cn/thinkjoy").mkdirs()
        file("src/main/java/cn/thinkjoy/package-info.java").createNewFile()
        file("src/main/resources").mkdirs()
        file("src/main/resources/spring.xml").createNewFile()

        file("src/test/java/cn/thinkjoy").mkdirs()
        file("src/test/java/cn/thinkjoy/package-info.java").createNewFile()
        file("src/test/resources/spring.xml").createNewFile()
    }

    /** 有时候会报错，但需要执行 */
//    task createREADME(){
//        file("README.md").createNewFile()
//    }

    configurations {
        provided
        compile.extendsFrom provided

        all*.exclude group: 'org.springframework', module: 'spring'
        all*.exclude group: 'asm', module: 'asm'
        all*.exclude group: 'log4j', module: 'log4j'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }
}

configure(subprojects.findAll { it.name.contains('-service') }) {
    task createServiceProject(dependsOn: 'createJavaProject') << {

        /** 配置生成 */
        file("src/main/resources/config").mkdirs()
        file("src/main/resources/config/main-conf.properties").createNewFile()
        file("src/main/resources/config/metadata.properties").createNewFile()
    }

}

configure(subprojects.findAll { it.name.contains('war') }) {
    apply plugin: 'war'
    apply plugin: 'jetty'

    task createWebProject(dependsOn: 'createJavaProject') << {
        def webAppDir = file("$webAppDirName")
        webAppDir.mkdirs()

        file("src/main/resources/config").mkdirs()
        file("src/main/resources/config/main-conf.properties").createNewFile()
        file("src/main/resources/config/metadata.properties").createNewFile()
    }

}

clean {
    delete "target"
}

task cleanResources(type: Delete) {
    delete 'build/resources'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

task stage(dependsOn: 'bootRepackage') {
}


compileJava.dependsOn processResources
processResources.dependsOn cleanResources
